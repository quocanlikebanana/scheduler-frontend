/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/stores/{storeId}/availability": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get work hours for a store */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id of the store */
                    storeId: components["parameters"]["storeId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["workHoursOfDays"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stores/{storeId}/timezone": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get timezone for a store */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id of the store */
                    storeId: components["parameters"]["storeId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * @description Timezone of the store
                             * @example Asia/Kolkata
                             */
                            timezone?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stores/{storeId}/teams": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get team members for a store */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id of the store */
                    storeId: components["parameters"]["storeId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["teamMemberSmall"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stores/{storeId}/teams/{teamId}/availability": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get availability of a team member in a store */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id of the store */
                    storeId: components["parameters"]["storeId"];
                    /** @description Id of a team member */
                    teamId: components["parameters"]["teamId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["workHoursOfDays"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stores/{storeId}/teams/{teamId}/booked": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get booked services of a team member in a store in time range */
        get: {
            parameters: {
                query: {
                    /** @description Start of the time range in date time */
                    startTime: components["parameters"]["startTime"];
                    /** @description End of the time range in date time */
                    endTime: components["parameters"]["endTime"];
                };
                header?: never;
                path: {
                    /** @description Id of the store */
                    storeId: components["parameters"]["storeId"];
                    /** @description Id of a team member */
                    teamId: components["parameters"]["teamId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["service"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stores/{storeId}/book": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Book a service in a store by a CMS user. Note: Customer can be anonymous with different schema (see the schema option) */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id of the store */
                    storeId: components["parameters"]["storeId"];
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        teamId: components["schemas"]["id"];
                        serviceId: components["schemas"]["id"];
                        /**
                         * Format: date-time
                         * @description Start time of the service
                         * @example 2021-01-01T09:00:00Z
                         */
                        start: string;
                        /**
                         * Format: date-time
                         * @description End time of the service
                         * @example 2021-01-01T09:30:00Z
                         */
                        end: string;
                        /**
                         * @description Comment for the service
                         * @example Please bring your own mask
                         */
                        comment?: string;
                        customer?: components["schemas"]["id"] | components["schemas"]["anonymousCustomer"];
                    };
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * Format: uuid
         * @description Id of the entity
         * @example 123e4567-e89b-12d3-a456-426614174000
         */
        id: string;
        timeRange: {
            /**
             * Format: time
             * @description Start time
             * @example 09:00
             */
            start?: string;
            /**
             * Format: time
             * @description End time
             * @example 18:00
             */
            end?: string;
        };
        workHoursOfDays: {
            monday?: components["schemas"]["timeRange"][];
            tuesday?: components["schemas"]["timeRange"][];
            wednesday?: components["schemas"]["timeRange"][];
            thursday?: components["schemas"]["timeRange"][];
            friday?: components["schemas"]["timeRange"][];
            saturday?: components["schemas"]["timeRange"][];
            sunday?: components["schemas"]["timeRange"][];
        };
        teamMemberSmall: {
            id?: components["schemas"]["id"];
            /**
             * @description Name of the team member
             * @example John Doe
             */
            name?: string;
            /**
             * @description Avatar of the team member
             * @example https://example.com/avatar.jpg
             */
            avatar?: string;
        };
        service: {
            /**
             * Format: uuid
             * @description Id of the service
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            id: string;
            /**
             * @description Name of the service
             * @example Haircut
             */
            name: string;
            /**
             * Format: date-time
             * @description Start time of the service
             * @example 2021-01-01T09:00:00Z
             */
            start: string;
            /**
             * Format: date-time
             * @description End time of the service
             * @example 2021-01-01T09:30:00Z
             */
            end: string;
        };
        /** @example {
         *       "name": "John Doe",
         *       "phone": "1234567890",
         *       "email": "johndoe@gmail.com",
         *       "address": "123, Example Street, City, Country",
         *       "avatar": "https://example.com/avatar.jpg"
         *     } */
        anonymousCustomer: {
            /** @example John Doe */
            name: string;
            /** @example 1234567890 */
            phone: string;
            /** @example abc@gmail.com */
            email?: string;
            /** @example 123, Example Street, City, Country */
            address?: string;
            /** @example https://example.com/avatar.jpg */
            avatar?: string;
        };
    };
    responses: never;
    parameters: {
        /** @description Id of the store */
        storeId: number;
        /** @description Id of a team member */
        teamId: number;
        /** @description Start of the time range in date time */
        startTime: string;
        /** @description End of the time range in date time */
        endTime: string;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
